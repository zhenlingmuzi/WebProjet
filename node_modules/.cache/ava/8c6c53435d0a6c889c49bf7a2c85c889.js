'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const request = require('supertest');
const app = require('../app');
const DB = require('../models/Database');

// The awaited results
const getAlliances = require('./results/alliances/get-alliances.json');
const getAllianceOne = require('./results/alliances/get-alliances-1.json');
const postAlliance = require('./results/alliances/post-alliances.json');
const deleteAlliance = require('./results/alliances/delete-alliances-1.json');
const putAlliance = require('./results/alliances/put-alliances-1.json');
const sql = DB.sql('../dumps/test-data.sql');

_ava2.default.serial('Alliances - GET - Get all alliances', t => {
  DB.accessor.query(sql).then(() => {
    return request(app).get('/alliances').then(res => {
      var _rec = new _powerAssertRecorder(),
          _rec2 = new _powerAssertRecorder(),
          _rec3 = new _powerAssertRecorder();

      t.is(_rec._expr(_rec._capt(_rec._capt(res, 'arguments/0/object').status, 'arguments/0'), {
        content: 't.is(res.status, 200)',
        filepath: 'tests\\alliances-tests.js',
        line: 20,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[5,8]},"property":{"type":"Identifier","name":"status","range":[9,15]},"computed":false,"range":[5,15]},{"type":"NumericLiteral","value":200,"range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"res","range":[5,8]},{"type":{"label":"."},"range":[8,9]},{"type":{"label":"name"},"value":"status","range":[9,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"num"},"value":200,"range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), 200);
      t.deepEqual(_rec2._expr(_rec2._capt(_rec2._capt(res, 'arguments/0/object').body, 'arguments/0'), {
        content: 't.deepEqual(res.body, getAlliances.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 21,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"getAlliances","range":[22,34]},"property":{"type":"Identifier","name":"result","range":[35,41]},"computed":false,"range":[22,41]}],"range":[0,42]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"getAlliances","range":[22,34]},{"type":{"label":"."},"range":[34,35]},{"type":{"label":"name"},"value":"result","range":[35,41]},{"type":{"label":")"},"range":[41,42]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), _rec3._expr(_rec3._capt(_rec3._capt(getAlliances, 'arguments/1/object').result, 'arguments/1'), {
        content: 't.deepEqual(res.body, getAlliances.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 21,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"getAlliances","range":[22,34]},"property":{"type":"Identifier","name":"result","range":[35,41]},"computed":false,"range":[22,41]}],"range":[0,42]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"getAlliances","range":[22,34]},{"type":{"label":"."},"range":[34,35]},{"type":{"label":"name"},"value":"result","range":[35,41]},{"type":{"label":")"},"range":[41,42]}]',
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  }).catch(error => {
    throw error;
  });
});

_ava2.default.serial('Alliances - GET - Get alliance id ' + getAllianceOne.parameters.id, t => {
  DB.accessor.query(sql).then(() => {
    return request(app).get('/alliances/' + getAllianceOne.parameters.id).then(res => {
      var _rec4 = new _powerAssertRecorder(),
          _rec5 = new _powerAssertRecorder(),
          _rec6 = new _powerAssertRecorder();

      t.is(_rec4._expr(_rec4._capt(_rec4._capt(res, 'arguments/0/object').status, 'arguments/0'), {
        content: 't.is(res.status, 200)',
        filepath: 'tests\\alliances-tests.js',
        line: 35,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[5,8]},"property":{"type":"Identifier","name":"status","range":[9,15]},"computed":false,"range":[5,15]},{"type":"NumericLiteral","value":200,"range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"res","range":[5,8]},{"type":{"label":"."},"range":[8,9]},{"type":{"label":"name"},"value":"status","range":[9,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"num"},"value":200,"range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), 200);
      t.deepEqual(_rec5._expr(_rec5._capt(_rec5._capt(res, 'arguments/0/object').body, 'arguments/0'), {
        content: 't.deepEqual(res.body, getAllianceOne.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 36,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"getAllianceOne","range":[22,36]},"property":{"type":"Identifier","name":"result","range":[37,43]},"computed":false,"range":[22,43]}],"range":[0,44]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"getAllianceOne","range":[22,36]},{"type":{"label":"."},"range":[36,37]},{"type":{"label":"name"},"value":"result","range":[37,43]},{"type":{"label":")"},"range":[43,44]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), _rec6._expr(_rec6._capt(_rec6._capt(getAllianceOne, 'arguments/1/object').result, 'arguments/1'), {
        content: 't.deepEqual(res.body, getAllianceOne.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 36,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"getAllianceOne","range":[22,36]},"property":{"type":"Identifier","name":"result","range":[37,43]},"computed":false,"range":[22,43]}],"range":[0,44]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"getAllianceOne","range":[22,36]},{"type":{"label":"."},"range":[36,37]},{"type":{"label":"name"},"value":"result","range":[37,43]},{"type":{"label":")"},"range":[43,44]}]',
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  }).catch(error => {
    throw error;
  });
});

_ava2.default.serial('Alliances - POST - Create Alliance', t => {
  DB.accessor.query(sql).then(() => {
    return request(app).post('/alliances/').send(postAlliance.body).then(res => {
      var _rec7 = new _powerAssertRecorder(),
          _rec8 = new _powerAssertRecorder(),
          _rec9 = new _powerAssertRecorder();

      t.is(_rec7._expr(_rec7._capt(_rec7._capt(res, 'arguments/0/object').status, 'arguments/0'), {
        content: 't.is(res.status, 200)',
        filepath: 'tests\\alliances-tests.js',
        line: 51,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[5,8]},"property":{"type":"Identifier","name":"status","range":[9,15]},"computed":false,"range":[5,15]},{"type":"NumericLiteral","value":200,"range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"res","range":[5,8]},{"type":{"label":"."},"range":[8,9]},{"type":{"label":"name"},"value":"status","range":[9,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"num"},"value":200,"range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), 200);
      t.deepEqual(_rec8._expr(_rec8._capt(_rec8._capt(res, 'arguments/0/object').body, 'arguments/0'), {
        content: 't.deepEqual(res.body, postAlliance.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 52,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"postAlliance","range":[22,34]},"property":{"type":"Identifier","name":"result","range":[35,41]},"computed":false,"range":[22,41]}],"range":[0,42]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"postAlliance","range":[22,34]},{"type":{"label":"."},"range":[34,35]},{"type":{"label":"name"},"value":"result","range":[35,41]},{"type":{"label":")"},"range":[41,42]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), _rec9._expr(_rec9._capt(_rec9._capt(postAlliance, 'arguments/1/object').result, 'arguments/1'), {
        content: 't.deepEqual(res.body, postAlliance.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 52,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"postAlliance","range":[22,34]},"property":{"type":"Identifier","name":"result","range":[35,41]},"computed":false,"range":[22,41]}],"range":[0,42]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"postAlliance","range":[22,34]},{"type":{"label":"."},"range":[34,35]},{"type":{"label":"name"},"value":"result","range":[35,41]},{"type":{"label":")"},"range":[41,42]}]',
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  }).catch(error => {
    throw error;
  });
});

_ava2.default.serial('Alliances - DELETE - Delete Alliance with id ' + deleteAlliance.parameters.id, t => {
  DB.accessor.query(sql).then(() => {
    return request(app).delete('/alliances/' + deleteAlliance.parameters.id).then(res => {
      var _rec10 = new _powerAssertRecorder(),
          _rec11 = new _powerAssertRecorder(),
          _rec12 = new _powerAssertRecorder();

      t.is(_rec10._expr(_rec10._capt(_rec10._capt(res, 'arguments/0/object').status, 'arguments/0'), {
        content: 't.is(res.status, 200)',
        filepath: 'tests\\alliances-tests.js',
        line: 66,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[5,8]},"property":{"type":"Identifier","name":"status","range":[9,15]},"computed":false,"range":[5,15]},{"type":"NumericLiteral","value":200,"range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"res","range":[5,8]},{"type":{"label":"."},"range":[8,9]},{"type":{"label":"name"},"value":"status","range":[9,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"num"},"value":200,"range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), 200);
      t.deepEqual(_rec11._expr(_rec11._capt(_rec11._capt(res, 'arguments/0/object').body, 'arguments/0'), {
        content: 't.deepEqual(res.body, deleteAlliance.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 67,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"deleteAlliance","range":[22,36]},"property":{"type":"Identifier","name":"result","range":[37,43]},"computed":false,"range":[22,43]}],"range":[0,44]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"deleteAlliance","range":[22,36]},{"type":{"label":"."},"range":[36,37]},{"type":{"label":"name"},"value":"result","range":[37,43]},{"type":{"label":")"},"range":[43,44]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), _rec12._expr(_rec12._capt(_rec12._capt(deleteAlliance, 'arguments/1/object').result, 'arguments/1'), {
        content: 't.deepEqual(res.body, deleteAlliance.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 67,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"deleteAlliance","range":[22,36]},"property":{"type":"Identifier","name":"result","range":[37,43]},"computed":false,"range":[22,43]}],"range":[0,44]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"deleteAlliance","range":[22,36]},{"type":{"label":"."},"range":[36,37]},{"type":{"label":"name"},"value":"result","range":[37,43]},{"type":{"label":")"},"range":[43,44]}]',
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  }).catch(error => {
    throw error;
  });
});

_ava2.default.serial('Alliances - PUT - Update Alliance with id ' + putAlliance.parameters.id, t => {
  DB.accessor.query(sql).then(() => {
    return request(app).put('/alliances/' + putAlliance.parameters.id).send(putAlliance.body).then(res => {
      var _rec13 = new _powerAssertRecorder(),
          _rec14 = new _powerAssertRecorder(),
          _rec15 = new _powerAssertRecorder();

      t.is(_rec13._expr(_rec13._capt(_rec13._capt(res, 'arguments/0/object').status, 'arguments/0'), {
        content: 't.is(res.status, 200)',
        filepath: 'tests\\alliances-tests.js',
        line: 82,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"is","range":[2,4]},"computed":false,"range":[0,4]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[5,8]},"property":{"type":"Identifier","name":"status","range":[9,15]},"computed":false,"range":[5,15]},{"type":"NumericLiteral","value":200,"range":[17,20]}],"range":[0,21]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"is","range":[2,4]},{"type":{"label":"("},"range":[4,5]},{"type":{"label":"name"},"value":"res","range":[5,8]},{"type":{"label":"."},"range":[8,9]},{"type":{"label":"name"},"value":"status","range":[9,15]},{"type":{"label":","},"range":[15,16]},{"type":{"label":"num"},"value":200,"range":[17,20]},{"type":{"label":")"},"range":[20,21]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), 200);
      t.deepEqual(_rec14._expr(_rec14._capt(_rec14._capt(res, 'arguments/0/object').body, 'arguments/0'), {
        content: 't.deepEqual(res.body, deleteAlliance.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 83,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"deleteAlliance","range":[22,36]},"property":{"type":"Identifier","name":"result","range":[37,43]},"computed":false,"range":[22,43]}],"range":[0,44]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"deleteAlliance","range":[22,36]},{"type":{"label":"."},"range":[36,37]},{"type":{"label":"name"},"value":"result","range":[37,43]},{"type":{"label":")"},"range":[43,44]}]',
        visitorKeys: _powerAssertVisitorKeys
      }), _rec15._expr(_rec15._capt(_rec15._capt(deleteAlliance, 'arguments/1/object').result, 'arguments/1'), {
        content: 't.deepEqual(res.body, deleteAlliance.result)',
        filepath: 'tests\\alliances-tests.js',
        line: 83,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"deepEqual","range":[2,11]},"computed":false,"range":[0,11]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"res","range":[12,15]},"property":{"type":"Identifier","name":"body","range":[16,20]},"computed":false,"range":[12,20]},{"type":"MemberExpression","object":{"type":"Identifier","name":"deleteAlliance","range":[22,36]},"property":{"type":"Identifier","name":"result","range":[37,43]},"computed":false,"range":[22,43]}],"range":[0,44]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"deepEqual","range":[2,11]},{"type":{"label":"("},"range":[11,12]},{"type":{"label":"name"},"value":"res","range":[12,15]},{"type":{"label":"."},"range":[15,16]},{"type":{"label":"name"},"value":"body","range":[16,20]},{"type":{"label":","},"range":[20,21]},{"type":{"label":"name"},"value":"deleteAlliance","range":[22,36]},{"type":{"label":"."},"range":[36,37]},{"type":{"label":"name"},"value":"result","range":[37,43]},{"type":{"label":")"},"range":[43,44]}]',
        visitorKeys: _powerAssertVisitorKeys
      }));
    });
  }).catch(error => {
    throw error;
  });
});
//# sourceMappingURL=..\node_modules\.cache\ava\8c6c53435d0a6c889c49bf7a2c85c889.js.map
{"version":3,"sources":["users-tests.js"],"names":["request","require","app","DB","getUsers","getUserOne","postUser","deleteUser","putUser","sql","serial","t","accessor","query","then","get","res","is","status","deepEqual","body","result","catch","error","fail","parameters","id","post","send","delete","put"],"mappings":"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","file":"users-tests.js","sourcesContent":["import test from 'ava';\r\nconst request = require('supertest');\r\nconst app = require('../app');\r\nconst DB = require('../models/Database');\r\n\r\n// The awaited results\r\nconst getUsers = require('./results/users/get-users.json');\r\nconst getUserOne = require('./results/users/get-users-1.json');\r\nconst postUser = require('./results/users/post-users.json');\r\nconst deleteUser = require('./results/users/delete-users-1.json');\r\nconst putUser = require('./results/users/put-users-1.json');\r\nconst sql = DB.sql('../dumps/data-tests.sql');\r\n\r\ntest.serial('Users - GET - Get all users', t => {\r\n  return DB.accessor.query(sql)\r\n    .then(() => {\r\n      return request(app)\r\n        .get('/users')\r\n        .then((res) => {\r\n          t.is(res.status, 200);\r\n          t.deepEqual(res.body, getUsers.result);\r\n        })\r\n    })\r\n    .catch((error) => {\r\n      t.fail();\r\n      throw error;\r\n    });\r\n});\r\n\r\ntest.serial('Users - GET - Get user id ' + getUserOne.parameters.id, t => {\r\n  return DB.accessor.query(sql)\r\n    .then(() => {\r\n      return request(app)\r\n        .get('/users/' + getUserOne.parameters.id)\r\n        .then((res) => {\r\n          t.is(res.status, 200);\r\n          t.deepEqual(res.body, getUserOne.result);\r\n        })\r\n    })\r\n    .catch((error) => {\r\n      t.fail();\r\n      throw error;\r\n    });\r\n});\r\n\r\ntest.serial('Users - POST - Create User', t => {\r\n  return DB.accessor.query(sql)\r\n    .then(() => {\r\n      return request(app)\r\n        .post('/users/')\r\n        .send(postUser.body)\r\n        .then((res) => {\r\n          t.is(res.status, 200);\r\n          t.deepEqual(res.body, postUser.result);\r\n        })\r\n    })\r\n    .catch((error) => {\r\n      t.fail();\r\n      throw error;\r\n    })\r\n});\r\n\r\ntest.serial('Users - DELETE - Delete User with id ' + deleteUser.parameters.id, t => {\r\n  return DB.accessor.query(sql)\r\n    .then(() => {\r\n      return request(app)\r\n        .delete('/users/' + deleteUser.parameters.id)\r\n        .then((res) => {\r\n          t.is(res.status, 200);\r\n          t.deepEqual(res.body, deleteUser.result);\r\n        })\r\n    })\r\n    .catch((error) => {\r\n      t.fail();\r\n      throw error;\r\n    });\r\n});\r\n\r\ntest.serial('Users - PUT - Update User with id ' + putUser.parameters.id, t => {\r\n  return DB.accessor.query(sql)\r\n    .then(() => {\r\n      return request(app)\r\n        .put('/users/' + putUser.parameters.id)\r\n        .send(putUser.body)\r\n        .then((res) => {\r\n          t.is(res.status, 200);\r\n          t.deepEqual(res.body, putUser.result);\r\n        })\r\n    })\r\n    .catch((error) => {\r\n      t.fail();\r\n      throw error;\r\n    });\r\n});"]}